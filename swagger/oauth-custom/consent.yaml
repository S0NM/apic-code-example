swagger: '2.0'
info:
  x-ibm-name: consent
  title: consent
  version: 1.0.0
schemes:
  - https
host: $(catalog.host)
basePath: /consent
consumes:
  - application/json
produces:
  - application/json
securityDefinitions:
  clientIdHeader:
    type: apiKey
    in: header
    name: X-IBM-Client-Id
security:
  - {}
x-ibm-configuration:
  testable: true
  enforced: true
  cors:
    enabled: true
  assembly:
    execute:
      - switch:
          title: switch
          case:
            - condition: "((request.verb==='GET')&&(api.operation.path==='/basic-auth'))"
              execute:
                - gatewayscript:
                    title: Authenticate
                    version: 1.0.0
                    description: Create Authentication URL
                    source: |
                      // author : @spoon or @shiup

                      var apic = require('./apim.custom.js');
                      apic.output('application/json');

                      var reqauth = apic.getvariable('request.authorization').split(' ');
                      var splitval = new Buffer((reqauth[1] || ''), 'base64').toString('utf8').split(':');
                      var username = splitval[0] || '';
                      var password = splitval[1] || '';

                      apic.console.debug('user credential : [' + username + ':' + password + ']');

                      if (username === apic.getvariable('request.parameters.username') && password === apic.getvariable('request.parameters.password')) {
                          session.output.write({"authenticatedUser":username});
                          apic.setvariable('message.headers.api-authenticated-credential', 'cn=' + username + ',email=' + username + '@poon.com');
                          apic.setvariable('message.status.code', 200)
                      }
                      else {
                          apic.setvariable('message.status.code', 401);
                      }
            - condition: "((request.verb==='GET')&&(api.operation.path==='/basic-auth-metadata'))"
              execute:
                - gatewayscript:
                    title: Authenticate
                    version: 1.0.0
                    description: Create Authentication URL
                    source: |
                      // author : @spoon or @shiup

                      var apic = require('./apim.custom.js');
                      apic.output('application/json');

                      var reqauth = apic.getvariable('request.authorization').split(' ');
                      var splitval = new Buffer((reqauth[1] || ''), 'base64').toString('utf8').split(':');
                      var username = splitval[0] || '';
                      var password = splitval[1] || '';

                      apic.console.debug('user credential : [' + username + ':' + password + ']');

                      if (username === apic.getvariable('request.parameters.username') && password === apic.getvariable('request.parameters.password')) {
                          session.output.write({"authenticatedUser":username});
                          apic.setvariable('message.headers.api-authenticated-credential', 'cn=' + username + ',email=' + username + '@poon.com');
                          apic.setvariable('message.status.code', 200)
                      }
                      else {
                          apic.setvariable('message.status.code', 401);
                      }
                - gatewayscript:
                    title: SetMetaData
                    version: 1.0.0
                    source: |-
                      var apic = require('./apim.custom.js');
                      apic.setvariable('message.headers.api-oauth-metadata-for-accesstoken', 'custom metadata for the accesstoken for user ' + apic.getvariable('request.parameters.username'));
                      apic.setvariable('message.headers.api-oauth-metadata-for-payload', 'custom payload data for the accesstoken for user ' + apic.getvariable('request.parameters.username'));
            - otherwise:
                - gatewayscript:
                    title: gatewayscript
                    version: 1.0.0
                    source: "require('./apim.custom.js').setvariable('message.status.code', 500);"
          version: 1.0.0
  phase: realized
paths:
  /basic-auth-metadata:
    get:
      responses:
        '200':
          description: 200 OK
    parameters:
      - name: username
        type: string
        required: true
        in: query
        description: User Name
      - name: password
        type: string
        required: true
        in: query
        description: Password
  /basic-auth:
    get:
      responses:
        '200':
          description: 200 OK
    parameters:
      - name: username
        type: string
        required: true
        in: query
        description: UserName
      - name: password
        type: string
        required: true
        in: query
        description: Password
definitions: {}
tags: []
