# implicit grant
# curl -k -v https://datapower/spoon/sb/oauth-3legged/oauth2/authorize -d 'response_type=token&client_id=e4dfd797-9fd9-49b7-b9db-3dde9d89471c&client_secret=xS3iJ6yT5bU0qJ6wV3aV3jF3nC7oS1vA5dT4aT4iF6tK3vU4hK&scope=checking saving openid&redirect_uri=https://www.getpostman.com/oauth2/callback' --user spoon:spoon

# code
# curl -k -v 'https://datapower/spoon/sb/oauth-3legged/oauth2/authorize?client_id=e4dfd797-9fd9-49b7-b9db-3dde9d89471c' -d 'response_type=code&redirect_uri=https://www.getpostman.com/oauth2/callback&scope=checking openid&client_secret=xS3iJ6yT5bU0qJ6wV3aV3jF3nC7oS1vA5dT4aT4iF6tK3vU4hK' --user spoon:spoon
# curl -k -v 'https://datapower/spoon/sb/oauth-3legged/oauth2/token' -d 'grant_type=authorization_code&redirect_uri=https://www.getpostman.com/oauth2/callback&scope=checking%20openid&client_id=e4dfd797-9fd9-49b7-b9db-3dde9d89471c&client_secret=xS3iJ6yT5bU0qJ6wV3aV3jF3nC7oS1vA5dT4aT4iF6tK3vU4hK&code=AALQx100aqhUSoup1uJeILvHPDUCY7LKhMNHPZhyWoEyVbUGY1gZMuxmXqM5zAeL3yoguWL0GEEZYb8aqDE8k-LzUCETYc8dYdao-fBhGwxjZfQNkGsY2Yk5q4cRibSfcW5UfvgyKKBUdiqcbvDg-NM9UgUEV6CTjaQspzLz9m36qPmt8Hwl-moZBVEjZn8kvCH2h7s41eh-qtowKw8IAHP5k192pOkSIP2wLyMnY13B-ZAVMDB0w9dA6D_IMqERQcZlQdDyKxiJYImCBFsuzGH-RrB-vaslva_abJBS8fzod_641lQKCDhC3QwIil0Stdap439MTA-03NvKAKZLMfspqMrv8WHM4fYC9m98gYO6jCh6knkRD9wXu3S599-Sqv0yhdMArVWD-sLsTV-LNxU1Cfira0Bp8mKcZH6cRjbyG7uv2fBFwukPmHtiEXKNsf5As69rxAIJdYA-lEOsrhmU'


swagger: '2.0'
info:
  x-ibm-name: oauth-3legged
  title: OAuth 3Legged
  version: 1.0.0
schemes:
  - https
host: $(catalog.host)
basePath: /oauth-3legged
securityDefinitions:
  clientID:
    description: "application's client_id"
    in: query
    name: client_id
    type: apiKey
  clientIdHeader:
    in: header
    type: apiKey
    name: X-IBM-Client-Id
  clientSecretHeader:
    in: header
    type: apiKey
    name: X-IBM-Client-Secret
security:
  - clientID: []
paths:
  /oauth2/authorize:
    get:
      produces:
        - text/html
      summary: endpoint for Authorization Code and Implicit grants
      description: description
      parameters:
        - name: response_type
          in: query
          description: request an authorization code or or access token (implicit)
          required: true
          type: string
          enum:
            - code
            - token
        - name: client_id
          in: query
          description: Application client ID
          required: true
          type: string
        - name: scope
          in: query
          description: Scope being requested
          type: string
          required: true
        - name: redirect_uri
          in: query
          type: string
          description: URI where user is redirected to after authorization
          required: false
        - name: state
          in: query
          type: string
          description: This string will be echoed back to application when user is redirected
          required: false
      responses:
        '200':
          description: An HTML form for authentication or authorization of this request.
        '302':
          description: |
            Redirect to the clients redirect_uri containing one of the following
            - **authorization code** for Authorization code grant
            - **access token** for Implicity grant
            - **error** in case of errors, such as the user has denied the request
      security:
        - clientID: []
    post:
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - text/html
      summary: submit approval to authorization code or access token
      description: |
        Submit resource owners approval (or rejection) for the OAuth2 Server to issue an
        authorization code or access token to the application.
      parameters:
        - name: client_id
          in: formData
          description: application requesting the access code or token
          required: true
          type: string
        - name: scope
          in: formData
          description: requested scope of this authorization
          required: true
          type: string
        - name: resource-owner
          in: formData
          description: resource owners user name
          required: true
          type: string
        - name: redirect_uri
          in: formData
          description: URI the application is requesting this code or token to be redirected to
          required: true
          type: string
        - name: original-url
          in: formData
          description: URL of the original authorization request
          required: true
          type: string
        - name: dp-state
          in: formData
          description: state information provided in the authorization form
          required: true
          type: string
        - name: dp-data
          in: formData
          description: state information provided in the authorization form
          required: true
          type: string
      responses:
        '200':
          description: Cool
      security:
        - clientID: []
  /oauth2/token:
    post:
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/json
      summary: Request Access Tokens
      description: |
        This endpoint allows requesting an access token following one of the flows below:
        - Authorization Code (exchange code for access token)
        - Client Credentials (2-legged, there isnt resource owner information)
        - Resource Owner Password Credentials (2-legged, client provides resource owner name and password)
        - Refresh Token (exchange refresh token for a new access code)

        The table below indicates the required parameters for each specific grant_type options.
        Empty cells indicate a parameter is ignored for that specific grant type.

        Client authentication:
        - Confidential clients should authenticate using HTTP Basic Authentication. Alternatively, they may post
          their client_id and client_secret information as a formData parameter.
        - Public clients should send their client_id as formData parameter.

        | grant_type           | code       | client_credentials | password    | refresh_token |
        |----------------------|------------|--------------------|-------------|---------------|
        | client_id            | required*  | required*          | required*   | required*     |
        | client_secret        | required*  | required*          | required*   | required*     |
        | code                 | required   |                    |             |               |
        | redirect_uri         | required   |                    |             |               |
        | username             |            |                    | required    |               |
        | password             |            |                    | required    |               |
        | scope                |            | optional           | optional    |               |
        | refresh_token        |            |                    |             | required      |

        The implicit grant requests, see /oauth2/authorize.
      security: []
      parameters:
        - name: grant_type
          in: formData
          description: Type of grant
          type: string
          required: true
          enum:
            - authorization_code
            - password
            - client_credentials
            - refresh_token
        - name: client_id
          in: formData
          description: 'Application client ID, can be provided in formData or using HTTP Basic Authentication'
          required: false
          type: string
        - name: client_secret
          in: formData
          description: 'Application secret, must be provided in formData or using HTTP Basic Authentication'
          required: false
          type: string
        - name: code
          in: formData
          description: Authorization code provided by the /oauth2/authorize endpoint
          required: false
          type: string
        - name: redirect_uri
          in: formData
          description: required only if the redirect_uri parameter was included in the authorization request /oauth2/authorize; their values MUST be identical.
          required: false
          type: string
        - name: username
          in: formData
          type: string
          description: Resource owner username
          required: false
        - name: password
          in: formData
          type: string
          description: Resource owner password
          required: false
        - name: scope
          in: formData
          type: string
          description: Scope being requested
          required: false
        - name: refresh_token
          in: formData
          type: string
          description: The refresh token that the client wants to exchange for a new access token (refresh_token grant_type)
          required: false
      responses:
        '200':
          description: 'json document containing token, etc.'
          schema:
            $ref: '#/definitions/access_token_response'
        '400':
          description: json document that may contain additional details about the failure
  /oauth2/issued:
    get:
      produces:
        - application/json
      summary: Returns list of permission granted to the owner
      description: |
        This endpoint allows the return of all the issued permission for a given authenticated owner per owner authenti
        defined in the x-ibm-configuration section
      security:
        - clientIdHeader: []
          clientSecretHeader: []
      responses:
        '200':
          description: 'json document containing issued information, etc.'
          schema:
            $ref: '#/definitions/issued_responses'
        '401':
          description: failure in retreiving issued list
    delete:
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/json
      summary: Revoke an application/client permission by the authorized owner
      description: Revoke an application/client permission by the authorized owner
      security:
        - clientIdHeader: []
          clientSecretHeader: []
      parameters:
        - name: client-id
          in: query
          description: client-id is the OAuth client_id or application id to be revoked
          required: true
          type: string
      responses:
        '200':
          description: OK
  /oauth2/introspect:
    post:
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/json
      summary: Introspect a given access_token supported
      description: |
        This endpoint introspects a given access_token
      security:
        - clientIdHeader: []
          clientSecretHeader: []
      parameters:
        - name: token
          in: formData
          description: String value of the access_token to be introspected
          required: true
          type: string
        - name: token_type_hint
          in: formData
          description: "This must contain 'access_token' to indicate the token type"
          required: true
          type: string
      responses:
        '200':
          description: 'json document containing issued information, etc.'
          schema:
            $ref: '#/definitions/introspect_response'
        '401':
          description: failure
x-ibm-configuration:
  testable: true
  enforced: true
  phase: realized
  oauth2:
    client-type: confidential
    scopes:
      checking: Checking Account
      saving: 節約勘定
      openid: OIDC Connect
    grants:
      - accessCode
      - implicit
    identity-extraction:
      type: default-form
    authentication:
      x-ibm-authentication-url:
        url: 'https://datapower/spoon/sb/utility/basic-auth-metadata/spoon/spoon'
        tls-profile: ''
    authorization:
      type: authenticated
    access-token:
      ttl: 3600
    refresh-token:
      count: 2048
      ttl: 2682000
    revocation:
      type: gateway
    metadata:
      metadata-url:
        url: ''
        tls-profile: ''
  cors:
    enabled: true
  type: oauth
  assembly:
    execute:
      - operation-switch:
          title: operation-switch
          case:
            - operations:
                - verb: get
                  path: /oauth2/authorize
                - verb: post
                  path: /oauth2/authorize
              execute:
                - xslt:
                    title: xslt
                    input: false
                    version: 1.0.0
                    source: "<xsl:stylesheet \n  xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"\n  version=\"1.0\"\n  xmlns:dp=\"http://www.datapower.com/extensions\"\n  xmlns:apim=\"http://www.ibm.com/apimanagement\"\n  extension-element-prefixes=\"dp apim\"\n  exclude-result-prefixes=\"dp apim\">\n  \n  <xsl:include href=\"local://isp/policy/apim.setvariable-impl.xsl\" dp:ignore-multiple=\"yes\"/>\n  \n  <xsl:template match=\"/\">\n    <xsl:variable name=\"location\">\n      <xsl:text/>\n      <xsl:value-of select=\"dp:http-response-header('Location')\"/>\n    </xsl:variable>\n    <xsl:message dp:priority=\"error\">*302 location*<xsl:value-of select=\"$location\"/>*</xsl:message>\n    <xsl:call-template name=\"apim:setVariableImpl\">\n      <xsl:with-param name=\"rawName\" select=\"'redirectLocation'\" />\n      <xsl:with-param name=\"rawValue\" select=\"$location\"/>\n      <xsl:with-param name=\"action\" select=\"'set'\" />\n    </xsl:call-template>\n  </xsl:template>\n</xsl:stylesheet>\n"
                - gatewayscript:
                    title: gatewayscript
                    version: 1.0.0
                    source: "\n/*\nif ((apim.getvariable('message.status.code').indexOf('302') >= 0) && (apim.getvariable('message.headers.location').indexOf('access_token=') >= 0) && (apim.getvariable('message.headers.location').indexOf('openid') >= 0))\n*/\nvar location = XML.stringify(apim.getvariable('redirectLocation'));\nif (location.indexOf('access_token=') >= 0) {\nconsole.error('sfp0');\nconsole.error('generate oidc');\n  var scopeind = '&amp;scope=';\n  var metadata = '';\n  console.error('location ' + location);\n  if (location.indexOf(scopeind) >= 0) {\n      var scopetmp = location.substring(location.indexOf(scopeind) + scopeind.length);\n      var scopelist = scopetmp.substring(0, scopetmp.indexOf('&amp;'));\n      // simple check, ideally this needs to convert %20 to space, and tokenize the file as the\n    // logic. and look for openid (see the 2legged for the logic)\n    console.error('scope ' + scopetmp + '+++' + scopelist);\n    if (scopelist.indexOf('openid') >= 0) {\n        // openid is enabled\n        var metadataind = '&amp;metadata=';\n        console.error('sfp metadata ');\n        if (location.indexOf(metadataind) >= 0) {\n            var metatmp = location.substring(location.indexOf(metadataind) + metadataind.length);\n            console.error('find metadata ' + metatmp);\n            if (metatmp.length > 2) {\n                var metadata = JSON.parse(metatmp.substring(2)) || {};\n                var id4oidc = metadata[\"id-for-oidc\"] || \"\";\n\n                if (id4oidc > \"\") {\n                    apim.setvariable('id-4-oidc', id4oidc, 'set');\n                    apim.setvariable('openid', 'yes', 'set');\n                }\n            }   \n        }\n        }\n    }\n}\n"
            - operations:
                - verb: post
                  path: /oauth2/token
              execute:
                - gatewayscript:
                    title: gatewayscript
                    version: 1.0.0
                    source: "// this logic can be better in\n// handling the sub claim by\n// reading the input as XML nodeset\n// and extract the username\n\nvar token = apim.getvariable(\"message.body\")['access_token'] || \"\";\nif (token != \"\") {\n  var splitScope = (apim.getvariable('message.body').scope || '').split(' ');\n  for(var i = 0; i < splitScope.length; i++) {\n    if (splitScope[i] === 'openid') {\n      // now that we have the\n      // challenge of what to use\n      // as subject claim. \n      // ToDo this, piggyback off the \n      // metadata for payload, look\n      // for an element name \n      // id-for-oidc.\n      // if this information \n      // does not exist, no oidc \n      // ideally, inspect the \n      // username from the request.\n      //  ^^ for the others as todo\n        \n      var metadata = apim.getvariable(\"message.body\")[\"metadata\"] || '';\n \n      var authenMeta = 'a:';\n      var metaMeta = 'm:';\n      var idForOIDC = \"\";\n      \n      if (metadata.indexOf(authenMeta) >= 0) {\n        idForOIDC = JSON.parse(metadata.substring(metadata.indexOf(authenMeta) + authenMeta.length))[\"id-for-oidc\"] || \"\";\n      }\n      else if (metadata.indexOf(metaMeta) >= 0) {\n        idForOIDC = JSON.parse(metadata.substring(metadata.indexOf(metaMeta) + metaMeta.length))[\"id-for-oidc\"] || \"\";\n      }\n      else {\n        // see above, ideally\n        // extract the username\n        // from the request, for\n        // now, no id_token\n      }\n\n      if (idForOIDC != \"\") {\n        apim.setvariable('id-4-oidc', idForOIDC, 'set');\n        apim.setvariable('openid', 'yes', 'set');\n      }\n    }\n  }\n}\n"
          otherwise: []
          version: 1.0.0
      - if:
          title: if
          condition: "apim.getvariable('openid') === 'yes'"
          execute:
            - set-variable:
                title: set-variable
                actions:
                  - set: iss.claim
                    value: spoon oidc
                  - set: RS512keypair
                    value: '{ "alg": "RS512", "d": "rAF8ipJOFhizcfuMTo2tRJQfXw31FqKm02D7UURE7mHEiq45O-FP6lsyG1UqtOh74YGfmbiTlS_6uwTo4dkZMT-wx7QtMnO95_P_WqeuL2z9E_QKjGx2NAVMk3qEdPdfx1-VB6pNuNRX_SLwyPF426yargXLZtJX11F_-RGMXjjoowSrBcii0jSN10D3L1ZOoo-tKOnKCtUTGOcjCv8nxmxLkw6pUKLyVcfChiHfQk5Jv96JU_L4UkjSJHM69zc15VgK5ETiJaTNLcCripodXyANjWotA828bcNGvffAGd6RNKt8mUbNRww4a4QVdBqL_XCngONpiQyZ3mAJP0UjEyuRI364snIIm4bTC6Dxwj5mAgud-cWlBvzHmS0kWlsWDKm4WhwVBEGA-bfoT_JvdgGjWoeTiobrcbb12V7mXG-3WjlvvU1JqZoQseDjeZb2NJ48JQUkloeh_eWk1Tz8QXyhscOowpGt6BzdV-ctTNEgb1UI_FjDmwIaQQsL0sWFpW64MwYfk6h6ua4r1Hw-Xzbr2-1TxvKOy_gShEdMkZ0rvs8q4sLB6S574Xh83ZuWOpa3hDXAV3mVT2ct-rNIQdPbiugQaV0MDEyMfhMBJl0HvzUz7uA4-SolLcetfwbRvj6T3zVe-EvU4hRZ9ElCaw5HqcS0cKDNcVmHsUAjbYE", "e": "AQAB", "n": "ywvyADwFdh87zNSVQyf--j4Vdy9gEhx8KLl4uF522ZVZX-7mzipiawwvSOq3G5kxtTI4XP9xhk0nIBUeU4HalkVqd8hk4ooO-bp6x1Mt4GHjGhOQC1IBypUgU9go3t0doBE_WBQXqQaBZQ_AT4r_IRGGHNS1SyQ_FnZa2dFXlR7E8x9fzXqhfpKBLyXU5YxcvieZVz8ohCHRTscD_BAiHHES5LQJxbd4u0t3icEcW_PrS_u59ZlD-52QV9IIn_XhDYBF7KaVSGFmWdVFJ3g2MhCaZ8koSFoVd5CdvioscLCHGiqq-9aHuRHJiELGAJJgMBZzhlqOGSsJAWIFeY0Cc8iLYdd1nw0NqOJdyeq5eaKtBR9whIUbil8GTwG_XQPWka1PYPAMyf4ClEoOR42_g4tUKqo810IuACG59qnQ1M4krx0wey42EFAJN9nQtLJvaF5ARewE3XLR7ROcRK14-SapWVmgzTIRFsfr-xCUVPUuAibE14P5lPKTZOxba4QxwxwUeIe2Tm8VrxLIfeP3PMJroggHgxtmk-dTF7NxJICNF4Y7q_09KajjbQ7PFJ5UjeN0-3pGmooohHs95dCzlFdmNS52Z_bx7hIJWdP1-6HU0TowYi0K7Klz6EfSSJeq0q6r3FwdlS4fSrdBwMPizPFk-mL68G3WsNN0naFHOS0", "kty": "RSA", "use": "sig", "kid": "spoon" }'
                version: 1.0.0
            - jwt-generate:
                title: jwt-generate
                iss-claim: iss.claim
                exp-claim: 3600
                version: 1.0.0
                jti-claim: true
                jwt: id-token
                sub-claim: id-4-oidc
                aud-claim: client.app.id
                jws-jwk: RS512keypair
                jws-alg: RS512
            - switch:
                title: switch
                case:
                  - condition: "((request.verb==='GET')&&(api.operation.path==='/oauth2/authorize'))||((request.verb==='POST')&&(api.operation.path==='/oauth2/authorize'))"
                    execute:
                      - gatewayscript:
                          title: gatewayscript
                          version: 1.0.0
                          source: |+
                            session.name('_apimgmt').setVar("id-token", apim.getvariable('id-token'));


                      - xslt:
                          title: xslt
                          input: false
                          version: 1.0.0
                          source: "<xsl:stylesheet \n  xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"\n  version=\"1.0\"\n  xmlns:dp=\"http://www.datapower.com/extensions\"\n  xmlns:apim=\"http://www.ibm.com/apimanagement\"\n  extension-element-prefixes=\"dp apim\"\n  exclude-result-prefixes=\"dp apim\">\n  \n  <xsl:include href=\"local://isp/policy/apim.setvariable-impl.xsl\" dp:ignore-multiple=\"yes\"/>\n  \n  <xsl:template match=\"/\">\n\n    <xsl:variable name=\"idtoken\">\n      <xsl:text/>\n      <xsl:value-of select=\"dp:variable('var://context/_apimgmt/id-token')\"/>\n    </xsl:variable>\n    \n    <xsl:if test=\"$idtoken != ''\">\n      <xsl:variable name=\"location\">\n        <xsl:value-of select=\"dp:http-response-header('Location')\"/>\n        <xsl:text>&amp;id_token=</xsl:text>\n        <xsl:value-of select=\"$idtoken\"/>\n      </xsl:variable>\n      <dp:set-http-response-header name=\"'Location'\" value=\"$location\"/>\n    </xsl:if>\n  </xsl:template>\n</xsl:stylesheet>\n"
                  - condition: "((request.verb==='POST')&&(api.operation.path==='/oauth2/token'))"
                    execute:
                      - gatewayscript:
                          title: gatewayscript
                          version: 1.0.0
                          source: |
                            var token = apim.getvariable("message.body");
                            token["id_token"] = apim.getvariable("id-token");
                            apim.setvariable("message.body", JSON.stringify(token));
                version: 1.0.0
          version: 1.0.0
    catch: []
definitions:
  access_token_response:
    type: object
    additionalProperties: false
    required:
      - token_type
      - access_token
      - expires_in
    properties:
      token_type:
        enum:
          - bearer
      access_token:
        type: string
      expires_in:
        type: integer
      scope:
        type: string
      refresh_token:
        type: string
  issued_response:
    type: object
    additionalProperties: false
    required:
      - clientId
      - owner
      - scope
      - issuedAt
      - expiredAt
      - refreshTokenIssued
    properties:
      clientId:
        type: string
      clientName:
        type: string
      owner:
        type: string
      scope:
        type: string
      issuedAt:
        type: string
      expiredAt:
        type: string
      refreshTokenIssued:
        type: boolean
      miscInfo:
        type: string
  issued_responses:
    type: array
    items:
      $ref: '#/definitions/issued_response'
  introspect_response:
    type: object
    additionalProperties: false
    required:
      - active
      - client_id
      - client_name
      - username
      - sub
      - exp
      - expstr
      - iat
      - nbf
      - nbfstr
      - scope
    properties:
      active:
        type: boolean
      client_id:
        type: string
      client_name:
        type: string
      username:
        type: string
      sub:
        type: string
      exp:
        type: string
      expstr:
        type: string
      iat:
        type: string
      nbf:
        type: string
      nbfstr:
        type: string
      scope:
        type: string
      miscinfo:
        type: string

