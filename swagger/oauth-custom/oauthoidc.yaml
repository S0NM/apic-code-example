swagger: '2.0'
info:
  x-ibm-name: oauth
  title: oauth
  version: 1.0.0
schemes:
  - https
host: $(catalog.host)
basePath: /oauth
securityDefinitions:
  clientID:
    description: "application's client_id"
    in: query
    name: client_id
    type: apiKey
  clientIdHeader:
    in: header
    type: apiKey
    name: X-IBM-Client-Id
  clientSecretHeader:
    in: header
    type: apiKey
    name: X-IBM-Client-Secret
security:
  - clientID: []
paths:
  /oauth2/authorize:
    get:
      produces:
        - text/html
      summary: endpoint for Authorization Code and Implicit grants
      description: description
      parameters:
        - name: response_type
          in: query
          description: request an authorization code or or access token (implicit)
          required: true
          type: string
          enum:
            - code
            - token
        - name: client_id
          in: query
          description: Application client ID
          required: true
          type: string
        - name: scope
          in: query
          description: Scope being requested
          type: string
          required: true
        - name: redirect_uri
          in: query
          type: string
          description: URI where user is redirected to after authorization
          required: false
        - name: state
          in: query
          type: string
          description: This string will be echoed back to application when user is redirected
          required: false
      responses:
        '200':
          description: An HTML form for authentication or authorization of this request.
        '302':
          description: |
            Redirect to the clients redirect_uri containing one of the following
            - **authorization code** for Authorization code grant
            - **access token** for Implicity grant
            - **error** in case of errors, such as the user has denied the request
      security:
        - clientID: []
    post:
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - text/html
      summary: submit approval to authorization code or access token
      description: |
        Submit resource owners approval (or rejection) for the OAuth2 Server to issue an
        authorization code or access token to the application.
      security:
        - clientID: []
      parameters:
        - name: client_id
          in: formData
          description: application requesting the access code or token
          required: true
          type: string
        - name: scope
          in: formData
          description: requested scope of this authorization
          required: true
          type: string
        - name: resource-owner
          in: formData
          description: resource owners user name
          required: true
          type: string
        - name: redirect_uri
          in: formData
          description: URI the application is requesting this code or token to be redirected to
          required: true
          type: string
        - name: original-url
          in: formData
          description: URL of the original authorization request
          required: true
          type: string
        - name: dp-state
          in: formData
          description: state information provided in the authorization form
          required: true
          type: string
        - name: dp-data
          in: formData
          description: state information provided in the authorization form
          required: true
          type: string
      responses:
        '200':
          description: Cool
  /oauth2/token:
    post:
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/json
      summary: Request Access Tokens
      description: |
        This endpoint allows requesting an access token following one of the flows below:
        - Authorization Code (exchange code for access token)
        - Client Credentials (2-legged, there isnt resource owner information)
        - Resource Owner Password Credentials (2-legged, client provides resource owner name and password)
        - Refresh Token (exchange refresh token for a new access code)

        The table below indicates the required parameters for each specific grant_type options.
        Empty cells indicate a parameter is ignored for that specific grant type.

        Client authentication:
        - Confidential clients should authenticate using HTTP Basic Authentication. Alternatively, they may post
          their client_id and client_secret information as a formData parameter.
        - Public clients should send their client_id as formData parameter.

        | grant_type           | code       | client_credentials | password    | refresh_token |
        |----------------------|------------|--------------------|-------------|---------------|
        | client_id            | required*  | required*          | required*   | required*     |
        | client_secret        | required*  | required*          | required*   | required*     |
        | code                 | required   |                    |             |               |
        | redirect_uri         | required   |                    |             |               |
        | username             |            |                    | required    |               |
        | password             |            |                    | required    |               |
        | scope                |            | optional           | optional    |               |
        | refresh_token        |            |                    |             | required      |

        The implicit grant requests, see /oauth2/authorize.
      security: []
      parameters:
        - name: grant_type
          in: formData
          description: Type of grant
          type: string
          required: true
          enum:
            - authorization_code
            - password
            - client_credentials
            - refresh_token
        - name: client_id
          in: formData
          description: 'Application client ID, can be provided in formData or using HTTP Basic Authentication'
          required: false
          type: string
        - name: client_secret
          in: formData
          description: 'Application secret, must be provided in formData or using HTTP Basic Authentication'
          required: false
          type: string
        - name: code
          in: formData
          description: Authorization code provided by the /oauth2/authorize endpoint
          required: false
          type: string
        - name: redirect_uri
          in: formData
          description: required only if the redirect_uri parameter was included in the authorization request /oauth2/authorize; their values MUST be identical.
          required: false
          type: string
        - name: username
          in: formData
          type: string
          description: Resource owner username
          required: false
        - name: password
          in: formData
          type: string
          description: Resource owner password
          required: false
        - name: scope
          in: formData
          type: string
          description: Scope being requested
          required: false
        - name: refresh_token
          in: formData
          type: string
          description: The refresh token that the client wants to exchange for a new access token (refresh_token grant_type)
          required: false
      responses:
        '200':
          description: 'json document containing token, etc.'
          schema:
            $ref: '#/definitions/access_token_response'
        '400':
          description: json document that may contain additional details about the failure
  /oauth2/issued:
    get:
      produces:
        - application/json
      summary: Returns list of permission granted to the owner
      description: |
        This endpoint allows the return of all the issued permission for a given authenticated owner per owner authenti
        defined in the x-ibm-configuration section
      security:
        - clientIdHeader: []
          clientSecretHeader: []
      responses:
        '200':
          description: 'json document containing issued information, etc.'
          schema:
            $ref: '#/definitions/issued_responses'
        '401':
          description: failure in retreiving issued list
    delete:
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/json
      summary: Revoke an application/client permission by the authorized owner
      description: Revoke an application/client permission by the authorized owner
      security:
        - clientIdHeader: []
          clientSecretHeader: []
      parameters:
        - name: client-id
          in: query
          description: client-id is the OAuth client_id or application id to be revoked
          required: true
          type: string
      responses:
        '200':
          description: OK
  /oauth2/introspect:
    post:
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/json
      summary: Introspect a given access_token supported
      description: |
        This endpoint introspects a given access_token
      security:
        - clientIdHeader: []
          clientSecretHeader: []
      parameters:
        - name: token
          in: formData
          description: String value of the access_token to be introspected
          required: true
          type: string
        - name: token_type_hint
          in: formData
          description: "This must contain 'access_token' to indicate the token type"
          required: true
          type: string
      responses:
        '200':
          description: 'json document containing issued information, etc.'
          schema:
            $ref: '#/definitions/introspect_response'
        '401':
          description: failure
x-ibm-configuration:
  testable: true
  enforced: true
  phase: realized
  oauth2:
    client-type: confidential
    scopes:
      checking: Checking Account
      saving: Saving Account
      mutual: Mutual Fund
      personal: Personal
      openid: OIDC
    grants:
      - application
      - password
      - accessCode
      - implicit
    identity-extraction:
      type: custom-form
      custom-form:
        url: 'https://datapower/spoon/sb/utility/custom-login-form'
    authentication:
      x-ibm-authentication-url:
        url: 'https://datapower/spoon/sb/utility/basic-auth-metadata/spoon/spoon'
        tls-profile: ''
    authorization:
      type: custom-form
      custom-form:
        url: 'https://datapower/spoon/sb/utility/custom-consent-form'
    access-token:
      ttl: 3600
    refresh-token:
      count: 2048
      ttl: 2682000
    revocation:
      type: gateway
    metadata:
      metadata-url:
        url: ''
        tls-profile: ''
  cors:
    enabled: true
  type: oauth
  assembly:
    execute:
      - if:
          title: 'oidc, inject an id_token'
          condition: "((request.path).endsWith('/oauth2/token'))"
          execute:
            - gatewayscript:
                title: gatewayscript
                version: 1.0.0
                source: |-
                  var splitScope = (apim.getvariable('message.body').scope || '').split(' ');
                  console.error('here 1' + apim.getvariable('message.body'));
                  console.error('here 2' + apim.getvariable('message.body').scope);
                  for(var i = 0; i < splitScope.length; i++) {
                    if (splitScope[i] === 'openid') {
                      console.error('here 3 found');
                      apim.setvariable('openid', 'yes', 'set');
                      apim.setvariable('oidc.audience', apim.getvariable('message.body').client_id, 'set');
                    }
                  }
            - if:
                title: if
                condition: "(apim.getvariable('openid') === 'yes')"
                execute:
                  - set-variable:
                      title: set-variable
                      actions:
                        - set: iss.claim
                          value: spoon oidc
                        - set: RS512-keypair
                          value: '{   "alg": "RS512",   "d": "AbT06gveq8JQFfn6Ssr58hrsHYAvY7Rp3IZ-R0qPNl5LmYJX1FL2_VoG_r3wvocf4Td9anrmkavDRZy3C4223JVcUFHnNIPLxOPtU-076Ho89XnoNfBMfiQHq5hXS3KjQcICtHs_VQCbXM6wfr0LlqaFh1WKrM3egSZu_rOBJE0wneQC_JhfLI-MI1pKxJXmE0U4hAXUhUjbLSH5TTZIXG56eH03Ror28c3CDGN3S5xBvDMC4BPhCFmmydGnhja1NuJDihw4CH52LYYi497ZEucBYUUGD6beN4-dtkv5UiUXyNX7pLr2Aed6azezbJ9R8dkb7jz63mVsZb99_12Y4Q",   "e": "AQAB",   "n": "p7XHlNWsL_hDqUikkMx4KcjQ9DecKukwVhvxVSSnskgkxUFgl4Z0CBEFSOYWcMoKHCjtLo_yZvzoWQnY9GS3kxV0K9Zdz0G9exX19wEWiLEaX4RLKsxZ-tPKH3oCOMcVQuKf2l5YXyk1H-BCkCKrD8dD4PBEc1nt9-qP-tF_u9DeLckGIyn7weibfsxFTk9hVN_57sk5VOuV8eVSSWBFH5xPG3ed51v-v-pDMRsYxL47hPtM9Qg961YY2BlOBiZ4fLyMd4JRsGclLUKADqC-wVn1nPjazh6IhfazSD0D6KTmvQYV_HEUUYOhBtXqq6rrXvaxxB72thtsUD-5L9qVDQ",   "kty": "RSA",   "use": "sig",   "kid": "spoon" }'
                      version: 1.0.0
                  - jwt-generate:
                      title: jwt-generate
                      iss-claim: iss.claim
                      exp-claim: 3600
                      version: 1.0.0
                      jwt: id_token
                      jti-claim: true
                      aud-claim: oidc.audience
                      jws-alg: RS512
                  - gatewayscript:
                      title: gatewayscript
                      version: 1.0.0
                      source: |-
                        var acctok = apim.getvariable("message.body");
                        acctok["id_token"] = apim.getvariable("id_token");
                        apim.setvariable("message.body",JSON.stringify(acctok));
                version: 1.0.0
          version: 1.0.0
    catch: []
definitions:
  access_token_response:
    type: object
    additionalProperties: false
    required:
      - token_type
      - access_token
      - expires_in
    properties:
      token_type:
        enum:
          - bearer
      access_token:
        type: string
      expires_in:
        type: integer
      scope:
        type: string
      refresh_token:
        type: string
  issued_response:
    type: object
    additionalProperties: false
    required:
      - clientId
      - owner
      - scope
      - issuedAt
      - expiredAt
      - refreshTokenIssued
    properties:
      clientId:
        type: string
      clientName:
        type: string
      owner:
        type: string
      scope:
        type: string
      issuedAt:
        type: string
      expiredAt:
        type: string
      refreshTokenIssued:
        type: boolean
      miscInfo:
        type: string
  issued_responses:
    type: array
    items:
      $ref: '#/definitions/issued_response'
  introspect_response:
    type: object
    additionalProperties: false
    required:
      - active
      - client_id
      - client_name
      - username
      - sub
      - exp
      - expstr
      - iat
      - nbf
      - nbfstr
      - scope
    properties:
      active:
        type: boolean
      client_id:
        type: string
      client_name:
        type: string
      username:
        type: string
      sub:
        type: string
      exp:
        type: string
      expstr:
        type: string
      iat:
        type: string
      nbf:
        type: string
      nbfstr:
        type: string
      scope:
        type: string
      miscinfo:
        type: string
